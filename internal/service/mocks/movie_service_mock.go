// Code generated by MockGen. DO NOT EDIT.
// Source: movie_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "events/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockMovieService is a mock of MovieService interface.
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService.
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance.
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieService) CreateMovie(request *domain.CreateMovieRequest) (*domain.CreateMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", request)
	ret0, _ := ret[0].(*domain.CreateMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieServiceMockRecorder) CreateMovie(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieService)(nil).CreateMovie), request)
}

// DeleteMovie mocks base method.
func (m *MockMovieService) DeleteMovie(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieServiceMockRecorder) DeleteMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieService)(nil).DeleteMovie), id)
}

// FilterMoviesByTags mocks base method.
func (m *MockMovieService) FilterMoviesByTags(tags []string, page, pageSize int) ([]*domain.GetMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterMoviesByTags", tags, page, pageSize)
	ret0, _ := ret[0].([]*domain.GetMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMoviesByTags indicates an expected call of FilterMoviesByTags.
func (mr *MockMovieServiceMockRecorder) FilterMoviesByTags(tags, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMoviesByTags", reflect.TypeOf((*MockMovieService)(nil).FilterMoviesByTags), tags, page, pageSize)
}

// GetAllMovies mocks base method.
func (m *MockMovieService) GetAllMovies(page, pageSize int) ([]*domain.GetMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovies", page, pageSize)
	ret0, _ := ret[0].([]*domain.GetMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMovies indicates an expected call of GetAllMovies.
func (mr *MockMovieServiceMockRecorder) GetAllMovies(page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovies", reflect.TypeOf((*MockMovieService)(nil).GetAllMovies), page, pageSize)
}

// GetMovieByID mocks base method.
func (m *MockMovieService) GetMovieByID(id primitive.ObjectID) (*domain.GetMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", id)
	ret0, _ := ret[0].(*domain.GetMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID.
func (mr *MockMovieServiceMockRecorder) GetMovieByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockMovieService)(nil).GetMovieByID), id)
}

// GetTotalMoviesCount mocks base method.
func (m *MockMovieService) GetTotalMoviesCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalMoviesCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalMoviesCount indicates an expected call of GetTotalMoviesCount.
func (mr *MockMovieServiceMockRecorder) GetTotalMoviesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalMoviesCount", reflect.TypeOf((*MockMovieService)(nil).GetTotalMoviesCount))
}

// SearchMovies mocks base method.
func (m *MockMovieService) SearchMovies(query string, page, pageSize int) ([]*domain.GetMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", query, page, pageSize)
	ret0, _ := ret[0].([]*domain.GetMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieServiceMockRecorder) SearchMovies(query, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieService)(nil).SearchMovies), query, page, pageSize)
}

// UpdateMovie mocks base method.
func (m *MockMovieService) UpdateMovie(id primitive.ObjectID, request *domain.UpdateMovieRequest) (*domain.UpdateMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", id, request)
	ret0, _ := ret[0].(*domain.UpdateMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieServiceMockRecorder) UpdateMovie(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieService)(nil).UpdateMovie), id, request)
}

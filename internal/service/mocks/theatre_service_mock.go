// Code generated by MockGen. DO NOT EDIT.
// Source: theatre_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "events/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTheatreService is a mock of TheatreService interface.
type MockTheatreService struct {
	ctrl     *gomock.Controller
	recorder *MockTheatreServiceMockRecorder
}

// MockTheatreServiceMockRecorder is the mock recorder for MockTheatreService.
type MockTheatreServiceMockRecorder struct {
	mock *MockTheatreService
}

// NewMockTheatreService creates a new mock instance.
func NewMockTheatreService(ctrl *gomock.Controller) *MockTheatreService {
	mock := &MockTheatreService{ctrl: ctrl}
	mock.recorder = &MockTheatreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheatreService) EXPECT() *MockTheatreServiceMockRecorder {
	return m.recorder
}

// CreajtePerformance mocks base method.
func (m *MockTheatreService) CreajtePerformance(request *domain.CreatePerformanceRequest) (*domain.CreatePerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreajtePerformance", request)
	ret0, _ := ret[0].(*domain.CreatePerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreajtePerformance indicates an expected call of CreajtePerformance.
func (mr *MockTheatreServiceMockRecorder) CreajtePerformance(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreajtePerformance", reflect.TypeOf((*MockTheatreService)(nil).CreajtePerformance), request)
}

// DeletePerformance mocks base method.
func (m *MockTheatreService) DeletePerformance(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerformance", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerformance indicates an expected call of DeletePerformance.
func (mr *MockTheatreServiceMockRecorder) DeletePerformance(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerformance", reflect.TypeOf((*MockTheatreService)(nil).DeletePerformance), id)
}

// FilterPerformancesByTags mocks base method.
func (m *MockTheatreService) FilterPerformancesByTags(tags []string, page, pageSize int) ([]*domain.GetPerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPerformancesByTags", tags, page, pageSize)
	ret0, _ := ret[0].([]*domain.GetPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterPerformancesByTags indicates an expected call of FilterPerformancesByTags.
func (mr *MockTheatreServiceMockRecorder) FilterPerformancesByTags(tags, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPerformancesByTags", reflect.TypeOf((*MockTheatreService)(nil).FilterPerformancesByTags), tags, page, pageSize)
}

// GetAllPerformances mocks base method.
func (m *MockTheatreService) GetAllPerformances(page, pageSize int) ([]*domain.GetPerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPerformances", page, pageSize)
	ret0, _ := ret[0].([]*domain.GetPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPerformances indicates an expected call of GetAllPerformances.
func (mr *MockTheatreServiceMockRecorder) GetAllPerformances(page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPerformances", reflect.TypeOf((*MockTheatreService)(nil).GetAllPerformances), page, pageSize)
}

// GetPerformanceByID mocks base method.
func (m *MockTheatreService) GetPerformanceByID(id primitive.ObjectID) (*domain.GetPerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerformanceByID", id)
	ret0, _ := ret[0].(*domain.GetPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerformanceByID indicates an expected call of GetPerformanceByID.
func (mr *MockTheatreServiceMockRecorder) GetPerformanceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerformanceByID", reflect.TypeOf((*MockTheatreService)(nil).GetPerformanceByID), id)
}

// GetTotalPerformancesCount mocks base method.
func (m *MockTheatreService) GetTotalPerformancesCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPerformancesCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPerformancesCount indicates an expected call of GetTotalPerformancesCount.
func (mr *MockTheatreServiceMockRecorder) GetTotalPerformancesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPerformancesCount", reflect.TypeOf((*MockTheatreService)(nil).GetTotalPerformancesCount))
}

// SearchPerformances mocks base method.
func (m *MockTheatreService) SearchPerformances(query string, page, pageSize int) ([]*domain.GetPerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPerformances", query, page, pageSize)
	ret0, _ := ret[0].([]*domain.GetPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPerformances indicates an expected call of SearchPerformances.
func (mr *MockTheatreServiceMockRecorder) SearchPerformances(query, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPerformances", reflect.TypeOf((*MockTheatreService)(nil).SearchPerformances), query, page, pageSize)
}

// UpdatePerformance mocks base method.
func (m *MockTheatreService) UpdatePerformance(id primitive.ObjectID, request *domain.UpdatePerformanceRequest) (*domain.UpdatePerformanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerformance", id, request)
	ret0, _ := ret[0].(*domain.UpdatePerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerformance indicates an expected call of UpdatePerformance.
func (mr *MockTheatreServiceMockRecorder) UpdatePerformance(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerformance", reflect.TypeOf((*MockTheatreService)(nil).UpdatePerformance), id, request)
}
